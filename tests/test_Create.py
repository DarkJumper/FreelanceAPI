import pytest
from freelanceapi.utils import (
    Create, create_ascii_hex, create_string_from_dict_with_list_of_dicts, create_string_from_dict_with_string
    )

from .ClassifyedExample import (example_classifyed_hw2blob, example_classifyed_msrrecord, example_classifyed_paradata)
from .ExampleRows import (example_msrrecord_row, example_paradata_row, exmaple_hw2blob_row)


def test_empty_create_string_from_dict_with_string():
    classify = Create({})
    assert classify.execute(create_string_from_dict_with_string()) == ""


def test_empty_create_string_from_dict_with_list_of_dicts():
    classify = Create({})
    assert classify.execute(create_string_from_dict_with_list_of_dicts()) == ""


def test_empty_create_ascii_hex():
    classify = Create({})
    assert classify.execute(create_ascii_hex()) == ""


def test_create_string_from_dict_with_string(example_classifyed_paradata):
    create_string = Create(example_classifyed_paradata["PARA"])
    assert create_string.execute(
        create_string_from_dict_with_list_of_dicts()
        ) == "QUIT1;11;CONFIRMFORM;1;1;QUIT2;11;CONFIRMFORM;1;1;QUIT3;11;CONFIRMFORM;1;2;QUIT4;11;CONFIRMFORM;1;2"


def test_create_string_from_dict_with_string(example_classifyed_msrrecord, example_msrrecord_row):
    create_string = Create(example_classifyed_msrrecord)
    assert create_string.execute(create_string_from_dict_with_string()) == example_msrrecord_row


def test_tuple_of_decode_ascii_code(example_classifyed_hw2blob):
    create_string = Create(example_classifyed_hw2blob["DTMC"])
    assert create_string.execute(
        create_ascii_hex()

